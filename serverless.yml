service:
  name: token-generator

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-2
  environment:
    APIKEY_DYNAMODB_TABLE: apiKeyStore
    API_DYNAMODB_TABLE: apiStore
    COGNITO_USER_POOL_ID: $(ssm:/token-generator-dev/test_cognito_user_pool_id)
    COGNITO_CLIENT_ID: $(ssm:/token-generator-dev/test_cognito_client_id)
    COGNITO_ARN: arn:aws:cognito-idp:eu-west-2:775052747630:userpool/eu-west-2_rQ3dI3Vbp
    ENCRYPT_SECRET: $(ssm:/token-generator-dev/encrypt_secret)
    ELASTIC_SEARCH_DOMAIN_NAME: api-search
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem

      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.APIKEY_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.API_DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - es:ESHttpPost
        - es:ESHttpPut
        - es:ESHttpDelete
        - es:ESHttpGet
      Resource:
        - "arn:aws:es:${opt:region, self:provider.region}:*:domain/${self:provider.environment.ELASTIC_SEARCH_DOMAIN_NAME}/*"    

functions:
  create-api-key:
    handler: controllers/apiKeyController.createKey
    events:
      - http:
          method: post
          path: api-key
          cors:
            - enabled: true
              origin: "*"
              headers: "Content-Type,Authorization,Access-Control-Allow-Origin"
              methods: "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT" 
          authorizer:
            arn: ${self:provider.environment.COGNITO_ARN}
  read-api-key:
    handler: controllers/apiKeyController.readKey
    events:
      - http:
          method: get
          path: api-key
          cors:
            - enabled: true
              origin: "*"
              headers: "Content-Type,Authorization,Access-Control-Allow-Origin"
              methods: "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT" 
          authorizer:
            arn: ${self:provider.environment.COGNITO_ARN}
  read-api-keys-for-user:
    handler: controllers/apiKeyController.readKeysForUser
    events:
      - http:
          method: get
          path: api-key/{cognito_username}
          cors:
            - enabled: true
              origin: "*"
              headers: "Content-Type,Authorization,Access-Control-Allow-Origin"
              methods: "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT" 
          authorizer:
            arn: ${self:provider.environment.COGNITO_ARN}
          request:
            parameters:
              paths:
                id: true
  read-all-unverified-keys:
    handler: controllers/apiKeyController.readAllUnVerifiedKeys
    events: 
      - http:
          method: get
          path: api-key/unverified
          cors:
            - enabled: true
              origin: "*"
              headers: "Content-Type,Authorization,Access-Control-Allow-Origin"
              methods: "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT" 
          authorizer:
            arn: ${self:provider.environment.COGNITO_ARN}

  verify-api-key:
    handler: controllers/apiKeyController.verifyKey
    events:
      - http:
          method: post
          path: api-key/verify
          cors:
            - enabled: true
              origin: "*"
              headers: "Content-Type,Authorization,Access-Control-Allow-Origin"
              methods: "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT" 
          authorizer:
            arn: ${self:provider.environment.COGNITO_ARN}
  authorise-api-key:
    handler: controllers/apiKeyController.authoriseKey
    events:
      - http:
          method: post
          cors:
            - enabled: true
              origin: "*"
              headers: "Content-Type,Authorization,Access-Control-Allow-Origin"
              methods: "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT" 
          path: api-key/authorise
  create-api:
    handler: controllers/apiController.createApi
    events:
      - http:
          method: post
          path: api
          cors:
            - enabled: true
              origin: "*"
              headers: "Content-Type,Authorization,Access-Control-Allow-Origin"
              methods: "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT" 
          authorizer:
            arn: ${self:provider.environment.COGNITO_ARN}
  read-api:
    handler: controllers/apiController.getApi
    events:
      - http:
          method: get
          path: api/{id}
          cors:
            - enabled: true
              origin: "*"
              headers: "Content-Type,Authorization,Access-Control-Allow-Origin"
              methods: "DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT"
          request:
            parameters:
              paths:
                id: true
  read-api-list:
    handler: controllers/apiController.getApiList
    events:
      - http:
          method: get
          path: api
          cors: true
       
resources:
  Resources:
    TokenStore:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.APIKEY_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    
    ApiStore:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.API_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    ApiSearch:
      Type: "AWS::Elasticsearch::Domain"
      Properties:
        ElasticsearchVersion: "6.3"
        DomainName: 
        ElasticsearchClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: "1"
          ZoneAwarenessEnabled: false
          InstanceType: "t2.small.elasticsearch"
        EBSOptions:
          EBSEnabled: true
          Iops: 0
          VolumeSize: 10
          VolumeType: "gp2"
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                AWS: "*"
              Action: "es:*"
              Resource: "*"
        AdvancedOptions:
          rest.action.multi.allow_explicit_index: "true"