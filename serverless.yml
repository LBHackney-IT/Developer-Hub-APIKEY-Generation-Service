service:
  name: token-generator

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-offline
  

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-2
  environment:
    DYNAMODB_TABLE: tokenStore
    COGNITO_USER_POOL_ID: eu-west-2_IwCxuEPy5
    COGNITO_CLIENT_ID: 1ob4p9o2i9qv3nb82fogubao90
    COGNITO_ARN: arn:aws:cognito-idp:eu-west-2:775052747630:userpool/eu-west-2_IwCxuEPy5
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create-api-key:
    handler: controllers/apiKey.createKey
    events:
      - http:
          method: post
          path: create-api-key
          authorizer:
            arn: ${self:provider.environment.COGNITO_ARN}
  read-api-key:
    handler: controllers/apiKey.readKey
    events:
      - http:
          method: get
          path: read-api-key
          authorizer:
            arn: ${self:provider.environment.COGNITO_ARN}
  verify-api-key:
    handler: controllers/apiKey.verifyKey
    events:
      - http:
          method: post
          path: verify-api-key
          authorizer:
            arn: ${self:provider.environment.COGNITO_ARN}
  authorise-api-key:
    handler: controllers/apiKey.authoriseKey
    events:
      - http:
          method: post
          path: authorise-api-key

resources:
  Resources:
    TokenStore:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

